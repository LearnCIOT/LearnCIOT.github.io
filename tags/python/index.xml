<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Tutorial for CIoT Open Data Applications</title>
    <link>https://LearnCIOT.github.io/tags/python/</link>
    <description>Recent content in Python on Tutorial for CIoT Open Data Applications</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language><atom:link href="https://LearnCIOT.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3.1. 基本資料存取方法</title>
      <link>https://LearnCIOT.github.io/ch3/ch3.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LearnCIOT.github.io/ch3/ch3.1/</guid>
      <description>Table Of Contents pyCIOT API 是什麼 pyCIOT API 使用方法 下載 pyCIOT 模組套件 使用 pyCIOT 模組 pyCIoT API 獲取資料方式 空氣資料存取 獲取專案代碼 Air().get_source() 獲取所有測站列表 Air().get_station() 獲取測站資料 Air().get_data() 水源資料存取 獲取專案代碼 Water().get_source() 獲取所有測站列表 Water().get_station() 獲取測站資料 Water().get_data() 地震資料存取 獲取專案代碼 Quake().get_source() 獲取地震監測站列表 Quake().get_station() 獲取地震資料 Quake().get_data() 獲取單一地震資料Quake().get_data() 天氣資料存取 獲取專案代碼 Weather().get_source() 獲取所有測站列表 Weather().get_station() 獲取測站資料 Weather().get_data() 影像資料存取 獲取專案代碼 CCTV().get_source() 獲取影像資料 CCTV().get_data() 災難警示資料存取 獲取災情示警 Disaster().get_alert() 獲取災情通報歷史資料 Disaster().get_notice() 參考資料 本章節涵蓋 pyCIOT API 的使用方法，以及空氣、水源、地震、天氣、影像資料、以及災難警示資料的基本存取方法。包含單一測站的最新一筆感測資料、獲取所有測站的列表，以及如何獲取所有測站當下最新的一筆感測資料。
本章節需要讀者有基本的終端機操作能力及接觸過 Python 程式基本語法。
pyCIOT API 是什麼 政府開放資料現已有非常多種類的資料及窗口讓我們查詢，而不同的窗口有各自不同的資料存取方式。即便這些資料逐漸使用開放授權，但在進行資料搜集時，因為下載取得資料的方式各有差異，若要將這些資料整理會變得極為麻煩。本函式庫（python 模組）為了解決窗口不一的困難，將所有有提供 API 的政府民生開放資料的開放搜集至此，嘗試讓開放資料獲取門檻降低，降低自動化及二手資料處理成本。****</description>
    </item>
    <item>
      <title>4.1. 時間序列資料處理</title>
      <link>https://LearnCIOT.github.io/ch4/ch4.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LearnCIOT.github.io/ch4/ch4.1/</guid>
      <description>Table Of Contents 章節目標 套件安裝與引用 讀取資料 空品資料 水位資料 氣象資料 資料視覺化 (Visualization) 重新採樣 (resample) 移動平均 (moving average) 多曲線圖 日曆熱力圖 資料品質檢測與處理 離群值偵測 (Outlier detection) 改變點偵測 (Change point detection) 缺失資料 (missing data) 處理 資料分解(Decomposition) 參考資料 時間序列資料是依照時間上發生的先後順序形成的資料，通常在資料上的時間間隔會一樣（例如：五分鐘一筆資料、一小時一筆資料），應用的領域相當廣泛，如：金融資訊、太空工程、訊號處理等，在分析上也有許多統計相關的工具可以使用。 同時也可以發現時序資料是很貼近日常生活的，隨著全球氣候變遷的日益加劇，這幾年全球的平均氣溫越來越高，在夏天時更是讓人熱到非常有感，也越來越難以忍受；又或是在一年中某些季節的空氣品質往往特別差，或者某些時間的空氣品質往往比其他時間來的差等。如果想要更加了解這些生活環境的改變，以及其對應的感測器數值是如何變化的，就會運用到時間序列資料的分析，也就是觀察資料與時間的關係，進而得出結果。本章節將會使用三種資料（空氣品質、水資源、氣象）示範。
章節目標 使用作圖工具觀察時序資料 檢測與處理時序資料 分解時序資料得到趨勢與週期性 套件安裝與引用 在本章節中，我們將會使用到 pandas, matplotlib, numpy, seaborn, statsmodels, warnings 等套件，這些套件由於在我們使用的開發平台 Colab 上皆已預先安裝好，因此不需要再另行安裝。然而，我們還會另外使用兩個 Colab 並未預先安裝好的套件：kats 和 calplot，需使用下列的方式自行安裝：
# 升級 pip，確保使用最新版 !pip install --upgrade pip # 安裝 Kats 套件，版本指定為 0.1，以及相依的 ax-platform 和 statsmodels 套件 !</description>
    </item>
    <item>
      <title>5.1. 地理空間篩選</title>
      <link>https://LearnCIOT.github.io/ch5/ch5.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LearnCIOT.github.io/ch5/ch5.1/</guid>
      <description>Table Of Contents 交集 (Intersect) 緩衝區 (Buffer) 多重緩衝區 (Multi-ring buffer) 距離矩陣 (Distance Matrix) 小結 民生公共物聯網的測站都有其空間位置，由於同一區域內常有類似的環境因子，所以它們的感測數值也會具有類似的起伏趨勢，而這也就是地理學的第一定律：“All things are related, but nearby things are more related than distant things.” (Waldo R. Tobler)
此外，單一測站的感測數據有可能因為局部干擾因子的影響，而產生較大的起伏，所以為進一步確認數據的可信度，我們會需要以單一測站為中心，依照其所屬的行政區或是指定距離 (半徑)，選取鄰近的測站ID與數值，並將其以表單或地圖的方式呈現，以便進行比對。
這個章節中，我們會利用環保署的空品測站、氣象局的局屬測站以及水利署在各縣市佈建的淹水感測器，示範如何利用地理空間篩選測站，並以其「位置」與「數值」為基礎，轉化成可利用的空間資訊。
# 引入 matplotlib、seaborn 等繪圖模組 import matplotlib.pyplot as plt import seaborn as sns # 引入 pandas 和 numpy 進行數據分析 import pandas as pd import numpy as np # 引入 urllib.request 來處理網路資源 import urllib.request # 引入 ssl 和 json 來處理安全連線和 JSON 格式 import ssl import json # 安裝 geopython 相關套件，主要是用在地理資料處理 !</description>
    </item>
    <item>
      <title>6.1. 機器學習初探</title>
      <link>https://LearnCIOT.github.io/ch6/ch6.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LearnCIOT.github.io/ch6/ch6.1/</guid>
      <description>Table Of Contents 基本介紹 分類問題 (Classification) 分群問題 (Clustering) 套件安裝與引用 案例一：空品資料的場所型態分類 資料清理 移除離群值 區別訓練資料與測試資料 使用 Sklearn 預建模型 案例二：空品資料的分群 資料下載與前處理 動態時間校正 (Dynamic Time Warping, DTW) 使用 K-Mean 分群演算法 探究資料分群與地理位置的關係 探究資料分群與風場風向的關係 案例三：結合氣象與水資源資料的分類與分群 資料下載與前處理 計算特定淹水感測器與雨量測站資料的相似度 資料分群並探究相關性高的雨量站 資料分類並由雨量計資料預測淹水可能性 參考資料 基本介紹 我們在之前的章節中，已經介紹民生公共物聯網豐富的開放資料內容，同時介紹從時間維度與空間維度的角度出發，進行各種不同的資料分析與處理，在這個章節中，我們將進一步初探機器學習的應用，介紹兩個經典的機器學習問題，分別是分類問題 (Classification) 與分群問題 (Clustering)。
分類問題 (Classification) 分類問題是機器學習理論中的一個經典問題，若用比較數學的方式來描述這個問題，我們可以假設有一組已經分類好的數據 X，以及每一筆資料在分類之後所得到的標籤集合 Y，而分類問題就是希望能透過這組分類好的數據與標籤，建構一個有效的分類器 (Classifier)，可以將尚未分類的數據 X’，並找到其中每一筆資料相對應的標籤 Y’。
因此，分類問題的重點，就是要構造一個有效的分類器 (Classifier)，為了達到這個目的，我們會先建立一個模型，利用已經標籤好 (labeled) 的數據進行訓練，並且讓這個模型盡可能地貼近與適應 (fit) 這些數據分佈狀態，完成訓練後，我們再利用此模型作為分類器，用來推測未知數據的標籤。
這個建立分類器的過程，在機器學習中被稱為監督式學習 (supervised learning)，而常見的分類器模型有 Nearest Neighbors、SVM Classifier、Decision Tree、*Random Forest *****等，在我們稍後的文章中，我們並不會針對每一種模型進行深入的講解，只會把這些模型直接拿來當作工具使用，對於這些模型有興趣的讀者，可以參考相關資源，自行再做更深入的探究。
分群問題 (Clustering) 分群問題和分類問題非常相似，主要差異在於分類問題是用已知的標籤數據資料推論未知的數據資料，而分群問題則是完全「無中生有」，在沒有事先標籤的情況下，根據數據的特徵自動將它們歸類出不同的群組。
若以比較數學的方式來描述這個問題，我們可以假設有一組完全沒有標記的數據 X，而分類問題就是希望能透過某種演算法，將 X 的資料區分為 k 個群組，其中每一個群組內的資料彼此相似度大，而不同群組的資料彼此相異度大。</description>
    </item>
    <item>
      <title>3.2. 存取特定時空條件的資料</title>
      <link>https://LearnCIOT.github.io/ch3/ch3.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LearnCIOT.github.io/ch3/ch3.2/</guid>
      <description>Table Of Contents 獲取特定時間序列之資料 獲取特定區域之資料 實作：所在地有比附近的空氣糟嗎？ 獲取檢測站資料 去除無效資料 計算距離 Pandas 函式庫 顯示結果 參考資料 本章節將以時間、空間的角度存取民生公共物聯網的資料，並以空氣品質監測作為題目進行簡易實作。
本章節會涵蓋到的技術：
datetime, math, numpy, pandas 等函式庫應用 json 資料格式處理 Pandas DataFrame 資料處理 獲取特定時間序列之資料 在 pyCIOT 中在執行 get_data() 時，能夠根據時間起始及結束時間獲取資料。格式以字典 (Dict) 傳入 time_range，分別為 start, end 及 num_of_data。
start 與 end 指資料搜集的開始及結束時間，格式為 ISO8601 或 Datetime。num_of_data 則是會控制獲取資料的筆數不會超過此數字。若在範圍內的資料超過 num_of_data 則會隔一段時間搜集，使資料與資料之間的時間間隔趨於平均。
以空氣資料為例，獲取之資料最多能夠回溯一天。因此當將 end 變數設定為一天之前不會獲得任何資料，請留意。此外，因為民生物聯網中各個感測器的更新頻率不同，所以不同感測器每「天」的資料筆數會有不同，詳可參閱：https://ci.taiwan.gov.tw/dsp/dataset_air.aspx
# 從 datetime 模組中引入 datetime 和 timedelta 類別 from datetime import datetime, timedelta end_date = datetime.now() # 獲取現在時間 isodate_end = end_date.</description>
    </item>
    <item>
      <title>4.2. 時間序列資料預測</title>
      <link>https://LearnCIOT.github.io/ch4/ch4.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LearnCIOT.github.io/ch4/ch4.2/</guid>
      <description>Table Of Contents 章節目標 套件安裝與引入 讀取資料 空品資料 水位資料 氣象資料 資料預處理 (Preprocess) 平穩性 (Stationary) 檢查 資料預測(Data forecast) ARIMA SARIMAX auto_arima Prophet LSTM Holt-Winter 綜合比較 參考資料 前一章節介紹了各種處理時序資料的方法，有視覺化呈現資料、時序資料分解&amp;hellip;&amp;hellip;等，經過處理後的資料可以讓我們更進一步的運用，擁有過去的資料後，會想要預知未來，因此本章節將會判斷時序資料的特性以及使用多種預測模型找出資料的的模式，藉此預測未來。
章節目標 時序資料特性的判斷：平穩性 學習各種預測模型並進行比較 使用時序資料進行訓練與預測 套件安裝與引入 在本章節中，我們將會使用到 pandas, matplotlib, numpy, statsmodels, warnings 等套件，這些套件由於在我們使用的開發平台 Colab 上皆已預先安裝好，因此不需要再另行安裝。然而，我們還會另外使用兩個 Colab 並未預先安裝好的套件：kats 和 pmdarima，需使用下列的方式自行安裝：
# 升級 pip，確保可以順利安裝後續的函式模組 !pip install --upgrade pip # 安裝特定版本的 kats、ax-platform 和 statsmodels 函式模組 # kats: Facebook 提供的時間序列工具箱 # ax-platform: 用於自適應實驗設計和優化的平台 # statsmodels: 提供統計模型和擬合的函式模組 !pip install kats==0.1 ax-platform==0.</description>
    </item>
    <item>
      <title>5.2. 地理空間分析</title>
      <link>https://LearnCIOT.github.io/ch5/ch5.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LearnCIOT.github.io/ch5/ch5.2/</guid>
      <description>Table Of Contents 勢力分佈圖 (Voronoi diagram) 最小範圍多邊形/凸包 (Convex hull) 空間群聚 (Clustering) 密度 (Kernel density) 空間內插 (Spatial interpolation) 反距離加權法 (Inverse Distance Weighting) 克力金法 (Kriging) 最近鄰居插值 (Nearest neighbor Interpolation) 空間內插後的資料處理 擷取等值線資料 (contour) 擷取橫切面的資料 (Profile) 參考資源 廣布在生活環境中的微型測站，協助我們掌握細緻的環境變化，並可據以決策跟行動。所以，清楚地掌握測站間的分布和數據特性，也是我們在分析測站數據時的重要基礎。這些測站除了本身的位置可能會形成某種幾何結構或空間群聚。同時，我們也可以依照測站位置與數值的差異，去推估沒有測站的區域的數值，從而獲得一個更為全面的數值分佈狀況，並從中探索感測數值與環境因子間的相關性。在這一個段落中，我們會利用水利署在不同縣市的淹水感測器與地下水位站資料，來進行一些簡單的空間分析。
勢力分佈圖 (Voronoi diagram) 首先，我們可能需要釐清個別測站的服務/防守範圍，並以此範圍中的測站數據來代表該區的現況。這個時候，我們可以利用沃羅諾伊圖（voronoi diagram）的方法去找尋這個範圍。沃羅諾伊圖的原理是在兩個相鄰測站間建立一條垂直平分線段，並藉由整合這些線段以構成一個多邊形；每個多邊形範圍的中心點就是測站，而該測站的數值則約可代表這個範圍內的數值。在這個範例中，我們嘗試利用嘉義縣、嘉義市的淹水感測器資料，去練習建立沃羅諾伊圖，這樣我們就可以初略知道這些淹水感測器的勢力分佈範圍。
# 引入所需的模組 import matplotlib.pyplot as plt import seaborn as sns import pandas as pd import numpy as np import urllib.request import ssl import json # 安裝 Geopython 相關函式模組 !apt install gdal-bin python-gdal python3-gdal # 安裝 Geopandas 需要的 python3-rtree !</description>
    </item>
    <item>
      <title>6.2. 異常資料偵測</title>
      <link>https://LearnCIOT.github.io/ch6/ch6.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LearnCIOT.github.io/ch6/ch6.2/</guid>
      <description>Table Of Contents 異常檢測框架 異常事件種類 異常事件可能原因 實際案例演練 套件安裝與引用 讀取資料與環境設定 尋找鄰近的感測器 每五分鐘進行感測資料的時間切片 以時間切片為單位計算鄰居感測器的平均感測值 判斷異常事件的門檻值 非正常使用機器偵測模組 (MD) 實作 即時污染偵測模組 (RED) 實作 感測器可靠度評估模組 (DR) 實作 參考資料 異常檢測框架 目前已有多個大規模微型空品監測系統成功部署於不同的國家與城市之中，然而這些微型感測器的主要挑戰之一為如何確保數據品質，並且能即時偵測出可能的異常現象。在台灣的中央研究院資訊科學研究所網路實驗室研究團隊，於2018年提出了一種可用於實際環境中的異常檢測框架，稱之為 Anomaly Detection Framework (ADF)。
此異常檢測框架由四個模組所組成：
時間片斷異常偵測 (Time-Sliced Anomaly Detection, TSAD)：可即時偵測感測器於空間或時間上的異常數據，並將結果輸出給其他模組進行進一步分析。 即時污染偵測模組 (Real-time Emission Detection, RED)：可透過 TSAD 的偵測結果，即時檢測潛在的區域性污染事件。 感測器可靠度評估模組 (Device Ranking, DR)：可累積 TSAD 的偵測結果，並據以評估每個微型感測器設備的可靠度 非正常使用機器偵測模組 (Malfunction Detection, MD)：可累積 TSAD 的偵測結果，透過數據分析判別可能為非正常使用的微型感測器，例如安裝在室內的機器、安置在持續性污染源旁邊的機器等。 異常事件種類 在 ADF 框架中，TSAD 模組在微型感測器每次收到新的感測資料後，便會進行時間類或空間類的異常事件判斷，我們以微型空品感測器為例，進行說明：
時間類異常事件：我們假設空氣的擴散是均勻緩慢的，因此同一台微型空品感測器在短時間內的數值變化應極為平緩，如果有某台微型空品感測器的感測數值在短時間內出現劇烈的變化，代表在時間維度上可能出現異常事件。 空間類異常事件：我們可以假設戶外的空氣在地理空間上是會均勻擴散的，因此微型空品感測器的感測數值，理應與周圍鄰近的感測器相似，如果有某台微型空品感測器的感測數值，與同時間鄰近區域的微型空品感測器的感測數值出現極大的差異，代表該感測器所處的空間可能出現異常事件。 異常事件可能原因 以上所述的異常事件有許多可能的原因，常見的原因有：
安裝環境異常：感測器被安裝於特定環境，因此無法呈現整體環境現象，例如安裝於廟宇旁、燒烤店內或其他室內不通風的地點。 機器故障或安裝錯誤：例如感測器安裝時將取風口的方向弄錯，或者感測器的風扇積垢導致運轉不順暢。 出現臨時污染源：例如感測器旁邊剛好有人在抽菸、發生火災或排放污染物質。 實際案例演練 在這篇文章中，我們將以民生公共物聯網中的空品資料為例，使用部分佈建於高雄市的校園微型空品感測器來進行分析，並且介紹如何使用 ADF 檢測框架來找出其中可能為室內機器或位於污染源附近的機器，藉此過濾出可信度相對較低的機器們，進而提高整體空品感測結果的可信度。</description>
    </item>
    <item>
      <title>4.3. 時間序列屬性分群</title>
      <link>https://LearnCIOT.github.io/ch4/ch4.3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LearnCIOT.github.io/ch4/ch4.3/</guid>
      <description>Table Of Contents 章節目標 套件安裝與引用 讀取資料與資料預處理 (Preprocessing) 資料分群 / 集群分析 (Clustering) 快速傅立葉轉換 (Fast Fourier Transform) 小波轉換 (Wavelet Transform) 參考資料 集群分析 (Cluster Analysis) 是資料科學中常見的資料處理方法，其主要目的是被用來找出資料中相似的群聚，透過集群分析後，將性質相近的資料群聚在一起，以方便使用者可以針對特徵相似的資料進行更深入的分析與處理。在民生公共物聯網的開放資料中，由於每一種感測器的資料都是時序性的資料，為了將為數眾多的感測器進行適當的分群，以利更深入的資料分析，我們在這個單元將介紹時序資料在分群時常使用的特徵擷取方法，以及在集群分析時常使用到的分群方法。
章節目標 學習使用快速傅立葉轉換 (FFT) 與小波轉換 (Wavelet) 擷取時序資料的特徵 採用非監督式學習的方法，針對時序資料進行分群 套件安裝與引用 在本章節中，我們將會使用到 pandas, numpy, matplotlib, pywt 等 Colab 開發平台已預先安裝好的套件，以及另外一個 Colab 並未預先安裝的套件 tslearn ，需使用下列的方式自行安裝：
# 更新 pip 至最新版本 !pip install --upgrade pip # 安裝 tslearn 套件，它是一個針對時間序列分析的套件 !pip install tslearn 待安裝完畢後，即可使用下列的語法先行引入相關的套件，完成本章節的準備工作：
# 引入 numpy 和 pandas，這兩個套件是進行資料分析時非常基本且常用的。 import numpy as np import pandas as pd # pywt 是進行小波轉換的套件，通常用於訊號處理。 import pywt # os 和 zipfile 用於處理文件和壓縮檔。 import os, zipfile # 引入 matplotlib.</description>
    </item>
    <item>
      <title>6.3. 感測器聯合校正</title>
      <link>https://LearnCIOT.github.io/ch6/ch6.3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LearnCIOT.github.io/ch6/ch6.3/</guid>
      <description>Table Of Contents 套件安裝與引用 讀取資料與環境設定 資料前處理 校正模型訓練與驗證 輸出本日最佳校正模型 校正成果簡介 參考資料 在這篇文章中，我們將以民生公共物聯網中的空品資料為例，介紹如何讓兩個不同等級的空品感測資料，可以透過資料科學的方法，進行系統性的動態校正，以達到系統資料融合的目的，讓不同佈建專案的成果，可以合力打造更為全面性的空品感測結果。我們使用下列兩種空品感測系統：
環保署空品感測器：在傳統的空品監測方式中，以極為專業、大型、昂貴的監測站為主，該專業的監測站由於部署及維護成本較高，通常會是由當地的環境保護機構（EPA）來負責運營。也因此不會在每個社區都有部署。依據台灣環保署網站公告，截至目前 2022 年 7 月為止，台灣的中央監測站數量為 81 座。 微型空品感測器：與傳統的大型專業測站相比，微型空品感測器利用低成本的感測器，透過網路的資料串連，以物聯網的方式建構更密集的空品感測網，這項技術不僅架設的成本低，連帶的提供了更靈活的安裝條件，擴大了可覆蓋的範圍。同時，這項技術具有易於安裝和維護的特點，滿足了大規模即時空氣品質監測系統的條件，而且能夠做到每分鐘上傳一次數據的資料頻率，也使用戶對於突然的污染事件得以立即的反應，進一步的降低傷害。 當然我們不能期待成本較低的感測器會擁有專業儀器的高準確度，如何提高其精準度成為成了另一項需要被解決的問題。因此，在以下的內容中，我們將演示如何利用資料科學的方法，調校微型空品感測器的空品感測結果，讓其感測資料的準確度能達到與環保署空品感測器相比擬的方法，以促進系統整合與更近一步的資料應用。
套件安裝與引用 在本章節中，我們將會使用到 pandas, numpy, datetime, sklearn, scipy, 及 joblib 等套件，這些套件在我們使用的開發平台 Colab 上已有預先提供，因此我們不需要另行安裝，可以直接用下列的方法引用，以備之後資料處理與分析使用。
# 引入資料處理模組 import pandas as pd # 用於資料處理和分析 import numpy as np # 用於數值計算 # 從 datetime 模組中引入日期和時間相關的功能 from datetime import datetime, timedelta # 引入 sklearn 模組中的機器學習工具 from sklearn import linear_model, svm, tree # 線性模型、隨機森林回歸模型、決策樹模型 # 引入模型評估和交叉驗證的工具 from sklearn import metrics as sk_metrics from sklearn.</description>
    </item>
    <item>
      <title>7.3 Leafmap 應用</title>
      <link>https://LearnCIOT.github.io/ch7/ch7.3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LearnCIOT.github.io/ch7/ch7.3/</guid>
      <description>Table Of Contents 套件安裝與引入 讀取資料 Leafmap 基本操作 資料基本呈現方法 資料叢集呈現方法 更改 Leafmap 底圖 整合 OSM 資源 Heatmap 應用 分割視窗功能 Leafmap 成果網頁化 小結 參考資料 我們在之前的章節中，已經示範了如何使用程式語言針對地理屬性的資料進行分析，同時也示範了如何使用 GIS 軟體進行簡易的地理資料分析與呈現。接下來我們介紹如何使用 Python 語言中的 Leafmap 套件進行 GIS 應用，以及 Streamlit 套件進行網站開發。最後，我們將結合 Leafmap 和 Streamlit，自行製作簡單的網頁 GIS 系統，並將資料處理與分析後的結果，透過網頁方式來呈現。
套件安裝與引入 在本章節中，我們將會使用到 pandas, geopandas, leafmap, ipyleaflet, osmnx, streamlit, geocoder 及 pyCIOT 等套件，這些套件除了 pandas 外，在我們使用的開發平台 Colab 上皆沒有預先提供，因此我們需要先自行安裝。由於本次安裝的套件數量較多，為了避免指令在執行後產生大量的文字輸出訊息，因此我們在安裝的指令中，增加了 ‘-q’ 的參數，可以讓畫面的輸出更精簡。
# 安裝 geopandas 用於地理空間資料處理 !pip install -q geopandas # 安裝 leafmap 用於地圖視覺化 !pip install -q leafmap # 安裝 ipyleaflet 也是用於地圖視覺化，但有更多互動功能 !</description>
    </item>
  </channel>
</rss>