<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>地 on Tutorial for CIoT Open Data Applications</title>
    <link>https://LearnCIOT.github.io/tags/%E5%9C%B0/</link>
    <description>Recent content in 地 on Tutorial for CIoT Open Data Applications</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language><atom:link href="https://LearnCIOT.github.io/tags/%E5%9C%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3.1. 基本資料存取方法</title>
      <link>https://LearnCIOT.github.io/ch3/ch3.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LearnCIOT.github.io/ch3/ch3.1/</guid>
      <description>Table Of Contents pyCIOT API 是什麼 pyCIOT API 使用方法 下載 pyCIOT 模組套件 使用 pyCIOT 模組 pyCIoT API 獲取資料方式 空氣資料存取 獲取專案代碼 Air().get_source() 獲取所有測站列表 Air().get_station() 獲取測站資料 Air().get_data() 水源資料存取 獲取專案代碼 Water().get_source() 獲取所有測站列表 Water().get_station() 獲取測站資料 Water().get_data() 地震資料存取 獲取專案代碼 Quake().get_source() 獲取地震監測站列表 Quake().get_station() 獲取地震資料 Quake().get_data() 獲取單一地震資料Quake().get_data() 天氣資料存取 獲取專案代碼 Weather().get_source() 獲取所有測站列表 Weather().get_station() 獲取測站資料 Weather().get_data() 影像資料存取 獲取專案代碼 CCTV().get_source() 獲取影像資料 CCTV().get_data() 災難警示資料存取 獲取災情示警 Disaster().get_alert() 獲取災情通報歷史資料 Disaster().get_notice() 參考資料 本章節涵蓋 pyCIOT API 的使用方法，以及空氣、水源、地震、天氣、影像資料、以及災難警示資料的基本存取方法。包含單一測站的最新一筆感測資料、獲取所有測站的列表，以及如何獲取所有測站當下最新的一筆感測資料。
本章節需要讀者有基本的終端機操作能力及接觸過 Python 程式基本語法。
pyCIOT API 是什麼 政府開放資料現已有非常多種類的資料及窗口讓我們查詢，而不同的窗口有各自不同的資料存取方式。即便這些資料逐漸使用開放授權，但在進行資料搜集時，因為下載取得資料的方式各有差異，若要將這些資料整理會變得極為麻煩。本函式庫（python 模組）為了解決窗口不一的困難，將所有有提供 API 的政府民生開放資料的開放搜集至此，嘗試讓開放資料獲取門檻降低，降低自動化及二手資料處理成本。****</description>
    </item>
    <item>
      <title>7.3. Leafmap 應用</title>
      <link>https://LearnCIOT.github.io/ch7/ch7.3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LearnCIOT.github.io/ch7/ch7.3/</guid>
      <description>Table Of Contents 套件安裝與引用 讀取資料 Leafmap 基本操作 資料基本呈現方法 資料叢集呈現方法 更改 Leafmap 底圖 整合 OSM 資源 Heatmap 應用 分割視窗功能 Leafmap 成果網頁化 小結 參考資料 我們在之前的章節中，已經示範了如何使用程式語言針對地理屬性的資料進行分析，同時也示範了如何使用 GIS 軟體進行簡易的地理資料分析與呈現。接下來我們介紹如何使用 Python 語言中的 Leafmap 套件進行 GIS 應用，以及 Streamlit 套件進行網站開發。最後，我們將結合 Leafmap 和 Streamlit，自行製作簡單的網頁 GIS 系統，並將資料處理與分析後的結果，透過網頁方式來呈現。
套件安裝與引用 在本章節中，我們將會使用到 pandas, geopandas, leafmap, ipyleaflet, osmnx, streamlit, geocoder 及 pyCIOT 等套件，這些套件除了 pandas 外，在我們使用的開發平台 Colab 上皆沒有預先提供，因此我們需要先自行安裝。由於本次安裝的套件數量較多，為了避免指令在執行後產生大量的文字輸出訊息，因此我們在安裝的指令中，增加了 ‘-q’ 的參數，可以讓畫面的輸出更精簡。
!pip install -q geopandas !pip install -q leafmap !pip install -q ipyleaflet !pip install -q osmnx !</description>
    </item>
  </channel>
</rss>